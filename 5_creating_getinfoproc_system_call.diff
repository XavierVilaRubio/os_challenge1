diff -urN linux-4.7.1/arch/x86/entry/syscalls/syscall_64.tbl linux-4.7.1_challenge1.5/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-4.7.1/arch/x86/entry/syscalls/syscall_64.tbl	2016-08-16 09:35:15.000000000 +0200
+++ linux-4.7.1_challenge1.5/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-24 12:11:16.963834327 +0200
@@ -335,6 +335,7 @@
 326	common	copy_file_range		sys_copy_file_range
 327	64	preadv2			sys_preadv2
 328	64	pwritev2		sys_pwritev2
+329	64	getinfoproc		sys_getinfoproc
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -urN linux-4.7.1/include/linux/syscalls.h linux-4.7.1_challenge1.5/include/linux/syscalls.h
--- linux-4.7.1/include/linux/syscalls.h	2016-08-16 09:35:15.000000000 +0200
+++ linux-4.7.1_challenge1.5/include/linux/syscalls.h	2020-10-24 16:44:21.909355362 +0200
@@ -65,6 +65,12 @@
 struct perf_event_attr;
 struct file_handle;
 struct sigaltstack;
+struct procinfo{
+	long start_time;
+	long utime;
+	long stime;
+	long elapsed_time;
+};
 union bpf_attr;
 
 #include <linux/types.h>
@@ -898,4 +904,6 @@
 
 asmlinkage long sys_mlock2(unsigned long start, size_t len, int flags);
 
+asmlinkage long sys_getinfoproc(pid_t pid, struct procinfo * pi);
+
 #endif
diff -urN linux-4.7.1/kernel/sys.c linux-4.7.1_challenge1.5/kernel/sys.c
--- linux-4.7.1/kernel/sys.c	2016-08-16 09:35:15.000000000 +0200
+++ linux-4.7.1_challenge1.5/kernel/sys.c	2020-10-24 16:43:01.056949362 +0200
@@ -2432,4 +2432,26 @@
 
 	return 0;
 }
+
+
+SYSCALL_DEFINE2 (getinfoproc, pid_t, pid, struct procinfo *, pi){
+
+        struct procinfo * tmp;
+
+        struct task_struct * task;
+        task = pid_task(find_get_pid(pid), PIDTYPE_PID);
+
+        tmp->start_time = task->start_time;
+        tmp->utime = task->utime;
+        tmp->stime = task->stime;
+        //struct timeval k;
+        //gettimeofday(&k, NULL);
+        //tmp->elapsed_time = tmp->start_time - k.tv_sec*1000000+k.tv_usec;
+
+        copy_to_user(tmp, &pi, sizeof(tmp));
+        return 0;
+
+}
+
+
 #endif /* CONFIG_COMPAT */
